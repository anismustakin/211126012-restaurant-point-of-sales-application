#labels Phase-Design
#The UML Diagram for the Application

= Introduction =

==This is a UML Illustration for the Online Restaurant Application==


[http://upload.wikimedia.org/wikipedia/commons/thumb/9/99/UML_Diagram_for_a_Online_Restaurant.png/800px-UML_Diagram_for_a_Online_Restaurant.png]





= Details =

The Application will have a Entity Class called *Person*. The *Person* Entity will consist of three Value Objects: *Name*, *Contact* and *Demographic*. The *Person* Entity will also be related to two other entities namely *Logins* and *PersonAddress*. All of these five Classes will have a 1:1 relationship with *Person* as one person(user) can only have one surname, name, address, login details, address and contact details. 

As a person can be either a employee or customer a Specialization hierarchy with disjointed subtypes were implemented. Thus *Employee* and *Customer* will inherit the attributes and relationships of the *Person* entity. The specialization hierarchy reflects the 1:1 relationship between *Person* and its subtypes *Employee* and *Customer* i.e. a *Employee* subtype occurrence is related to one instance of the *Person* supertype. *Employee* and *Customer* has a disjoint relationship with *Person* which means that each entity instance of the supertype can appear in only one of the subtypes. Which if put simply a Person can either be a *Customer* or a *Employee* but not both. I understand the fact that a employee would also like to be able to order food, and they can do so still when logging in as a employee, but they will still be of type *Employee*. This relationship also has a Total completeness constraint meaning that every supertype occurrence must be a member of at least one subtype. 

The *Employee* then also becomes a supertype as a employee can either be a delivery person or a manager with admin rights. The same disjoint relationship and completeness constraints were applied here. Where a *Employee* is either a *DeliveryPerson* or a *ManagerAdmin*, but cannot be both. 

The *Customer* entity class is now further extended. The *Customer* Entity first has a 1:M relationship with *CreditCard* because a customer can have different credit cards he pays with when deciding to make a online payment for the order. 

The *Customer* Entity also has a 1:M relationship with *Orders* as one customer will place multiple orders